module Dict.Skel where

-- Haskell module generated by the BNF converter

import Dict.Abs
import Dict.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transDictionary :: Dictionary -> Result
transDictionary x = case x of
  Dict entrys  -> failure x


transEntry :: Entry -> Result
transEntry x = case x of
  E id args  -> failure x
  EA id args terms  -> failure x


transTerm :: Term -> Result
transTerm x = case x of
  TermC id terms  -> failure x
  TermA arg  -> failure x


transArg :: Arg -> Result
transArg x = case x of
  NId id  -> failure x
  NArg n  -> failure x
  NStr str  -> failure x



