module Dict.Abs where

-- Haskell module generated by the BNF converter

newtype Ident = Ident String deriving (Eq,Ord,Show)
data Dictionary =
   Dict [Entry]
  deriving (Eq,Ord,Show)

data Entry =
   E Ident [Arg]
 | EA Ident [Arg] [Term]
  deriving (Eq,Ord,Show)

data Term =
   TermC Ident [Term]
 | TermA Arg
  deriving (Eq,Ord,Show)

data Arg =
   NId Ident
 | NArg Integer
 | NStr String
  deriving (Eq,Ord,Show)

